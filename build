#!/bin/bash

set -e

HTTP_SERVER_NAME="http://192.168.2.16"
HTTP_FILE_NAME="LHG.efi"

BASE_DIR=${PWD}
LLDR_DIR=${BASE_DIR}/l-loader
EDK_DIR=${BASE_DIR}/edk2
IMG_DIR=${BASE_DIR}/image
RFS_DIR=${BASE_DIR}/rootfs
BBT_DIR=${BASE_DIR}/burn-boot
OPSL_DIR=${EDK_DIR}/CryptoPkg/Library/OpensslLib
IMAGE=${RFS_DIR}/build-rpb/tmp-rpb-glibc/deploy/images/hikey/Image-initramfs-hikey.bin
DTB_FILE=${RFS_DIR}/build-rpb/tmp-rpb-glibc/deploy/images/hikey/Image-hi6220-hikey.dtb
RFS_FILE=${RFS_DIR}/build-rpb/tmp-rpb-glibc/deploy/images/hikey/core-image-minimal-hikey.tar.xz
TC32_URL=http://releases.linaro.org/archive/15.02/components/toolchain/binaries/arm-linux-gnueabihf/gcc-linaro-4.9-2015.02-3-x86_64_arm-linux-gnueabihf.tar.xz
TC64_URL=http://releases.linaro.org/archive/15.02/components/toolchain/binaries/aarch64-linux-gnu/gcc-linaro-4.9-2015.02-3-x86_64_aarch64-linux-gnu.tar.xz
OPSL_URL=https://ftp.openssl.org/source/old/1.0.2/openssl-1.0.2j.tar.gz

NORMAL=`tput sgr0`
BLACK=`tput setaf 0`
RED=`tput setaf 1`
GREEN=`tput setaf 2`
YELLOW=`tput setaf 3`
BLUE=`tput setaf 4`
MAGENTA=`tput setaf 5`
CYAN=`tput setaf 6`
WHITE=`tput setaf 7`

BUILD_TYPE=DEBUG

unset ARCH CROSS_COMPILE
export PATH=${BASE_DIR}/tc32/bin:${BASE_DIR}/tc64/bin:$PATH

function silent() {
	"$@" > /dev/null 2>&1
}

function fetch() {
	if [ ! -d $4 ]; then
		if [ $1 == "wget" ]; then
			echo "${YELLOW}Downloading ${3}....${NORMAL}"
			mkdir -p $4
			$1 $2 -O $3
			echo "${YELLOW}Extracting ${3}....${NORMAL}"
			tar -axf $3 -C $4 --strip-components=1
			echo "${GREEN}done${NORMAL}"
		elif [ $1 == "git" ]; then
			echo "${YELLOW}Cloning ${4}....${NORMAL}"
			$1 clone $2 -b $3 $4
			echo "${GREEN}done${NORMAL}"
		fi
	fi
}

function build_edk2() {
	echo "${YELLOW}Fetching Files...${NORMAL}"
	fetch git https://github.com/96boards-hikey/arm-trusted-firmware.git hikey arm-trusted-firmware
	fetch git https://git.linaro.org/uefi/uefi-tools.git master uefi-tools
	fetch git https://github.com/tianocore/edk2.git master edk2
	fetch git https://github.com/linaro-home/RdkPkg.git master edk2/RdkPkg
	fetch git https://github.com/linaro-home/OpenPlatformPkg.git hikey-rdk edk2/OpenPlatformPkg
	fetch git https://git.linaro.org/uefi/LinaroPkg.git master LinaroPkg
	fetch git https://github.com/96boards/l-loader.git master l-loader
	fetch git https://github.com/96boards/burn-boot.git master burn-boot
	fetch wget ${TC32_URL} tc32/gcc-linaro-4.9-2015.02-3-x86_64_arm-linux-gnueabihf.tar.xz tc32
	fetch wget ${TC64_URL} tc64/64gcc-linaro-4.9-2015.02-3-x86_64_aarch64-linux-gnu.tar.xz tc64
	fetch wget ${OPSL_URL} ${OPSL_DIR}/openssl-1.0.2j.tar.gz ${OPSL_DIR}/openssl-1.0.2j

	cd ${EDK_DIR}
	git reset --hard 465663e9f128428323e6c6e4431dd15ac287a24c
	cd CryptoPkg/Library/OpensslLib/openssl-1.0.2j
	if patch -p1 --dry-run < ../EDKII_openssl-1.0.2j.patch > /dev/null 2>&1; then
		echo "${YELLOW}Patching OpenSSL${NORMAL}"
		patch -p1 < ../EDKII_openssl-1.0.2j.patch
		cd .. 
		./Install.sh
	fi

	echo "${YELLOW}Building EDKII${NORMAL}"
	cd ${EDK_DIR}
	${BASE_DIR}/uefi-tools/uefi-build.sh -c ../LinaroPkg/platforms.config \
		-b ${BUILD_TYPE} -a ../arm-trusted-firmware hikey

	echo "${GREEN}EDKII Build Success${NORMAL}"
}

function prepare_image() {
	if [ ! -f ${EDK_DIR}/Build/HiKey/${BUILD_TYPE}_GCC49/FV/bl1.bin ]; then
		echo "${RED}!!! Build edk2 before generating images !!!${NORMAL}"
		exit
	fi

	if [ ! -f ${RFS_FILE} ]; then
		echo "${RED}!!! Build rootfs before generating images !!!${NORMAL}"
		exit
	fi

	mkdir -p ${IMG_DIR}
	cd ${IMG_DIR}
	if [ ! -f PK.crt ]; then
		echo "${YELLOW}Creating openssl keys${NORMAL}"
		silent openssl req -new -x509 -newkey rsa:2048 -subj "/CN=my PK /" -keyout PK.key \
			-out PK.crt -days 3650 -nodes -sha256 
		silent openssl req -new -x509 -newkey rsa:2048 -subj "/CN=my KEK /" -keyout KEK.key \
			-out KEK.crt -days 3650 -nodes -sha256
		silent openssl x509 -in PK.crt -out PK.cer -outform DER 
		silent openssl x509 -in KEK.crt -out KEK.cer -outform DER

		echo "${YELLOW}Creating reserved image${NORMAL}"
		silent dd if=/dev/zero of=reserved.img bs=1K count=128
		printf "%016d" `stat -c "%s" "PK.cer"` >  tmp
		cat PK.cer >> tmp
		printf "%016d" `stat -c "%s" "KEK.cer"` >> tmp
		cat KEK.cer >> tmp
		silent dd if=tmp of=reserved.img conv=notrunc

		echo "${YELLOW}Creating nvme image${NORMAL}"
		silent dd if=/dev/zero of=nvme.img bs=1K count=128

		echo "${YELLOW}Creating rootfs image${NORMAL}"
		dd if=/dev/zero of=rootfs.ext3 bs=1M count=512
		sync
		 mkfs.ext3 rootfs.ext3

		echo "${YELLOW}Creating boot partition${NORMAL}"
		silent dd if=/dev/zero of=boot-fat.uefi.img bs=1M count=64
		silent mkfs.vfat -F 32 -n 'boot' boot-fat.uefi.img

		#create partition table
		echo "${YELLOW}Creating partition table${NORMAL}"
		silent make -C ${LLDR_DIR} PTABLE_LST=aosp-4g ptable.img 
	fi

	echo "${YELLOW}Creating l-loader.bin${NORMAL}"
	silent make -C ${LLDR_DIR} BL1=${EDK_DIR}/Build/HiKey/${BUILD_TYPE}_GCC49/FV/bl1.bin l-loader.bin

	echo "${YELLOW}Creating Signed Kernel Image${NORMAL}"
	sbsign --key KEK.key --cert KEK.crt --output ImageSigned ${IMAGE}

	echo "${YELLOW}Creating Server.url${NORMAL}"
	echo "${HTTP_SERVER_NAME}/${HTTP_FILE_NAME}" > Server.url

	echo "${YELLOW}Creating Signed Rootfs${NORMAL}"
	mkdir -p mnt temp
	sudo mount -t ext3 rootfs.ext3 mnt
	cp ${RFS_FILE} rootfs.tar.xz
	cp ${DTB_FILE} hi6220-hikey.dtb
	sudo tar -axf rootfs.tar.xz -C temp
	sudo tar -acf rootfs.tar.gz -C temp .
	sudo rm -rf temp
	openssl dgst -sha256 -sign KEK.key -out rootfs.sha256 rootfs.tar.gz
	sudo cp rootfs.sha256 rootfs.tar.gz mnt
	sudo umount mnt

	echo "${YELLOW}Creating System Image${NORMAL}"
	ext2simg rootfs.ext3 system.img

	echo "${YELLOW}Creating Bundled Image${NORMAL}"
	printf "%016d" `stat -c "%s" "system.img"` >  tmp
	cat system.img >> tmp
	printf "%016d" `stat -c "%s" "ImageSigned"` >>  tmp
	cat ImageSigned >> tmp
	printf "%016d" `stat -c "%s" "hi6220-hikey.dtb"` >> tmp
	cat hi6220-hikey.dtb >> tmp
	sync
	mv tmp ${HTTP_FILE_NAME}

	echo "${YELLOW}Creating Boot Image${NORMAL}"
	sudo mount boot-fat.uefi.img mnt
	sudo mkdir -p mnt/EFI/BOOT
	sudo cp KEK.crt mnt/EFI/BOOT
	sudo cp Server.url mnt/EFI/BOOT
	sudo cp hi6220-hikey.dtb mnt/EFI/BOOT
	sudo cp ImageSigned mnt/EFI/BOOT/Image
	sudo umount mnt

	echo "${GREEN}Images ready for flashing${NORMAL}"
}

function flash_image() {
	cd ${IMG_DIR}
	cp ${BBT_DIR}/hisi-idt.py .
	cp ${LLDR_DIR}/l-loader.bin .
	cp ${LLDR_DIR}/ptable-aosp-4g.img .
	cp ${EDK_DIR}/Build/HiKey/${BUILD_TYPE}_GCC49/FV/fip.bin .

	echo "${YELLOW}Flashing l-loader.bin${NORMAL}"
	sudo python hisi-idt.py --img1=l-loader.bin
	sleep 3

	echo "${YELLOW}Flashing partition table${NORMAL}"
	sudo fastboot flash ptable ptable-aosp-4g.img
	sleep 1

	echo "${YELLOW}Flashing FIP.bin${NORMAL}"
	sudo fastboot flash fastboot fip.bin
	sleep 1

	echo "${YELLOW}Flashing nvme.img${NORMAL}"
	sudo fastboot flash nvme nvme.img
	sleep 1

	echo "${YELLOW}Flashing reserved.img${NORMAL}"
	sudo fastboot flash reserved reserved.img
	sleep 1

	echo "${YELLOW}Flashing boot.img${NORMAL}"
	sudo fastboot flash boot boot-fat.uefi.img
	sleep 1

	echo "${YELLOW}Flashing system.img${NORMAL}"
	sudo fastboot flash system system.img
	sleep 1

	echo "${GREEN}Flashing Done${NORMAL}"
}

function build_rootfs() {
	mkdir -p ${RFS_DIR}
	cd ${RFS_DIR}

	if [ ! -d bin ]; then
		mkdir bin
		curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > bin/repo
		chmod a+x bin/repo
	fi

	if [ ! -d bitbake ]; then
		PATH=${PWD}/bin:$PATH 
		echo "${YELLOW}Fetching Files.......${NORMAL}"
		repo init -u https://github.com/96boards/oe-rpb-manifest.git -b morty
		repo sync
		fetch git https://github.com/linaro-home/meta-lhg.git master layers/meta-lhg
		sed -i -e '24,28s/.*/#&/' -e '49s/.*/#&/' layers/meta-96boards/conf/machine/hikey.conf
		echo 'EXTRA_IMAGEDEPENDS += "initramfs-secure-boot"' \
			>> layers/meta-96boards/conf/machine/hikey.conf
		echo 'MACHINE_ESSENTIAL_EXTRA_RDEPENDS += "initramfs-secure-boot"' \
			>> layers/meta-96boards/conf/machine/hikey.conf
		echo 'INITRAMFS_IMAGE_BUNDLE = "1"' \
			>> layers/meta-lhg/meta-lhg/conf/layer.conf
		echo 'INITRAMFS_IMAGE = "rdk-secure-initramfs"' \
			>> layers/meta-lhg/meta-lhg/conf/layer.conf
		echo 'INITRAMFS_FSTYPES = "cpio.gz"'	\
			>> layers/meta-lhg/meta-lhg/conf/layer.conf
		echo 'COMPATIBLE_HOST = "aarch64-linaro-linux"' \
			>> layers/openembedded-core/meta/recipes-core/initrdscripts/initramfs-live-install_1.0.bb
		echo 'COMPATIBLE_HOST = "aarch64-linaro-linux"' \
			>> layers/openembedded-core/meta/recipes-core/initrdscripts/initramfs-live-install-efi_1.0.bb
	fi

	export MACHINE=hikey DISTRO=rpb
	source setup-environment 
	if ! grep -q meta-lhg conf/bblayers.conf; then
		echo "${YELLOW}Adding meta-lhg layer${NORMAL}"
		bitbake-layers add-layer ../layers/meta-lhg/meta-lhg
	fi
	bitbake core-image-minimal 

	echo "${GREEN}Kernel & RootFS Ready${NORMAL}"
}

case "$1" in
	"rootfs")
		echo "${GREEN}>>>>>>>>>>>>>>>>>>>>>>>>> Building Kernel & RootFS <<<<<<<<<<<<<<<<<<<<<<<<<${NORMAL}"
		build_rootfs
		;;

	"edk2")
		echo "${GREEN}>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Building EDK2 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<${NORMAL}"
		build_edk2
		;;

	"image")
		echo "${GREEN}>>>>>>>>>>>>>>>>>>>>>>>>>>> Creating images <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<${NORMAL}"
		prepare_image
		;;

	"flash")
		echo "${GREEN}>>>>>>>>>>>>>>>>>>>>>>>>>>> Flashing images <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<${NORMAL}"
		flash_image
		;;

	*)
		echo "${RED}!!! unknown argument !!!"
		echo "usage:"
		echo "	./build rootfs"
		echo "	./build edk2"
		echo "	./build image"
		echo "	./build flash${NORMAL}"
		exit
		;;
esac
